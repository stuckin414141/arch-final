Seq
  Seq
    Seq
      Seq
        Seq
          Seq
            Seq
              LetStmt add0
                type: (int)->((int)->(int))
                Expr
                  Ftmlk
                  Requires env: false
                    Args
                      x0 : int
                        Ref: false
                      y0 : int
                        Ref: false
                    Body
                      BinOp +
                        Left
                          Var x0
                        Right
                          Var y0
                        Type: int
                Is closure: false
                Is recursive: false
              Print
                FtmlkApp
                  Func
                    Var add0
                  Args
                    Num 10
                    Num 30
            LetStmt twice0
              type: ((int)->(int))->((int)->(int))
              Expr
                Ftmlk
                Requires env: false
                  Args
                    f0 : (int)->(int)
                      Ref: false
                    arg0 : int
                      Ref: false
                  Body
                    FtmlkApp
                      Func
                        Var f0
                      Args
                        FtmlkApp
                          Func
                            Var f0
                          Args
                            Var arg0
              Is closure: false
              Is recursive: false
          LetStmt square0
            type: (int)->(int)
            Expr
              Ftmlk
              Requires env: false
                Args
                  x0 : int
                    Ref: false
                Body
                  BinOp *
                    Left
                      Var x0
                    Right
                      Var x0
                    Type: int
            Is closure: false
            Is recursive: false
        Print
          FtmlkApp
            Func
              Var twice0
            Args
              Var square0
              Num 4
      LetStmt compose0
        type: ((int)->(int))->(((int)->(int))->((int)->(int)))
        Expr
          Ftmlk
          Requires env: false
            Args
              f0 : (int)->(int)
                Ref: false
              g0 : (int)->(int)
                Ref: false
              x0 : int
                Ref: false
            Body
              Let intermediate0
                Expr
                  FtmlkApp
                    Func
                      Var f0
                    Args
                      Var x0
                Body
                  FtmlkApp
                    Func
                      Var g0
                    Args
                      Var intermediate0
                Is closure: false
                Recursive: false
                Type: int
        Is closure: false
        Is recursive: false
    LetStmt over_four0
      type: (int)->(int)
      Expr
        Ftmlk
        Requires env: false
          Args
            x0 : int
              Ref: false
          Body
            BinOp /
              Left
                Var x0
              Right
                Num 4
              Type: int
      Is closure: false
      Is recursive: false
  Print
    FtmlkApp
      Func
        Var compose0
      Args
        Var square0
        Var over_four0
        Num 4
