Seq
  Seq
    Seq
      Seq
        LetStmt outer10
          type: int
          Expr
            Num 10
          Is closure: false
          Is recursive: false
        LetStmt outer20
          type: int
          Expr
            Num 20
          Is closure: false
          Is recursive: false
      LetStmt outer30
        type: int
        Expr
          Num 30
        Is closure: false
        Is recursive: false
    LetStmt selective_capture0
      type: (bool)->(int)
      Expr
        Ftmlk
          Args
            b0 : bool
              Ref: false
          Body
            ESeq
              Stmt
                Seq
                  LetStmt inner10
                    type: (bool)->(int)
                    Expr
                      Ftmlk
                        Args
                          b1 : bool
                            Ref: false
                        Body
                          BinOp +
                            Left
                              Var outer10
                            Right
                              Var outer30
                            Type: int
                    Is closure: false
                    Is recursive: false
                  LetStmt unused0
                    type: int
                    Expr
                      Var outer20
                    Is closure: false
                    Is recursive: false
              Expr
                FtmlkApp
                  Func
                    Var inner10
                  Args
                    Bool true
      Is closure: false
      Is recursive: false
  Print
    FtmlkApp
      Func
        Var selective_capture0
      Args
        Bool false
