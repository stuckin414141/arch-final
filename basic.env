Seq
  LetStmt 0sl
    type: {x0: int}
    Expr
      RecordExp
        Field x0
          Expr
            Num 0
          Type: int
    Is closure: false
    Is recursive: false
  Seq
    Seq
      Seq
        Seq
          Seq
            Seq
              Seq
                LetStmt x0
                  type: int
                  Expr
                    Num 10
                  Is closure: true
                  Is recursive: false
                LetStmt nested_functions0
                  type: (int)->(int)
                  Expr
                    Ftmlk
                    Requires env: true
                      Args
                        0env : {x0: int}
                          Ref: false
                        y0 : int
                          Ref: true
                      Body
                        Let 0sl
                          Expr
                            RecordExp
                              Field 0prev
                                Expr
                                  Var 0env
                                Type: {x0: int}
                              Field y0
                                Expr
                                  Num 0
                                Type: int
                          Body
                            ESeq
                              Stmt
                                LetStmt f0
                                  type: (int)->(int)
                                  Expr
                                    Ftmlk
                                    Requires env: true
                                      Args
                                        0env : {0prev: {x0: int}, y0: int}
                                          Ref: false
                                        z0 : int
                                          Ref: false
                                      Body
                                        Let 0sl
                                          Expr
                                            RecordExp
                                              Field 0prev
                                                Expr
                                                  Var 0env
                                                Type: {0prev: {x0: int}, y0: int}
                                          Body
                                            BinOp +
                                              Left
                                                BinOp +
                                                  Left
                                                    Var x0
                                                  Right
                                                    Var y0
                                                  Type: int
                                              Right
                                                Var z0
                                              Type: int
                                          Is closure: false
                                          Recursive: false
                                          Type: {0prev: {0prev: {x0: int}, y0: int}}
                                  Is closure: false
                                  Is recursive: false
                              Expr
                                FtmlkApp
                                  Func
                                    Var f0
                                  Args
                                    Var y0
                          Is closure: false
                          Recursive: false
                          Type: {0prev: {x0: int}, y0: int}
                  Is closure: false
                  Is recursive: false
              Print
                FtmlkApp
                  Func
                    Var nested_functions0
                  Args
                    Num 20
            Nothing
          LetStmt make_adder0
            type: ({x: int, y: int})->((int)->(int))
            Expr
              Ftmlk
              Requires env: false
                Args
                  0env : {x0: int}
                    Ref: false
                  p0 : {x: int, y: int}
                    Ref: true
                Body
                  Let 0sl
                    Expr
                      RecordExp
                        Field 0prev
                          Expr
                            Var 0env
                          Type: {x0: int}
                        Field p0
                          Expr
                            nullptr
                          Type: {x: int, y: int}
                    Body
                      Ftmlk
                      Requires env: true
                        Args
                          0env : {0prev: {x0: int}, p0: {x: int, y: int}}
                            Ref: false
                          z0 : int
                            Ref: false
                        Body
                          Let 0sl
                            Expr
                              RecordExp
                                Field 0prev
                                  Expr
                                    Var 0env
                                  Type: {0prev: {x0: int}, p0: {x: int, y: int}}
                            Body
                              BinOp +
                                Left
                                  BinOp +
                                    Left
                                      MemberOf 
                                        Expr
                                          Var p0
                                        Type: {x: int, y: int}
                                          Field: x
                                    Right
                                      MemberOf 
                                        Expr
                                          Var p0
                                        Type: {x: int, y: int}
                                          Field: y
                                    Type: int
                                Right
                                  Var z0
                                Type: int
                            Is closure: false
                            Recursive: false
                            Type: {0prev: {0prev: {x0: int}, p0: {x: int, y: int}}}
                    Is closure: false
                    Recursive: false
                    Type: {0prev: {x0: int}, p0: {x: int, y: int}}
            Is closure: false
            Is recursive: false
        LetStmt point0
          type: {x: int, y: int}
          Expr
            RecordExp
              Field x
                Expr
                  Num 5
                Type: int
              Field y
                Expr
                  Num 10
                Type: int
          Is closure: false
          Is recursive: false
      LetStmt adder0
        type: (int)->(int)
        Expr
          FtmlkApp
            Func
              Var make_adder0
            Args
              Var point0
        Is closure: false
        Is recursive: false
    Print
      FtmlkApp
        Func
          Var adder0
        Args
          Num 15
